#!/usr/bin/env python3

import sys
from bspc import ULTRAWIDE_ID, VERTICAL_ID, rget
import bspc
from bspc.event_utils import split_ratio

DEFAULT_FOCUS_COLOR = "#4491ed"
MONOCLE_FOCUS_COLOR = "#c792ea"
STICKY_FOCUS_COLOR = "#f78c6c"
FLOATING_FOCUS_COLOR = "#22da6e"


def _set_focus_color(color):
    bspc.config("focused_border_color", color)


def _set_monocle_focus(desk_id):
    desk_info = bspc.tree("--desktop", desk_id)
    layout = desk_info["userLayout"]

    # set color if monocle with other windows
    if layout == "monocle":
        # any other windows?
        nodes = bspc.query("--nodes", "--desktop", desk_id, "--node", ".leaf")
        if len(nodes) > 1:
            _set_focus_color(MONOCLE_FOCUS_COLOR)
            return True

    return False


def handle_border_color(ev, ev_args):
    # as long as color is changed from default, bail early
    mon_id, desk_id = ev_args[:2]

    # bail for node state first
    if ev == "desktop_layout":
        if _set_monocle_focus(desk_id):
            return

    else:
        node_id = ev_args[2]
        node_info = bspc.tree("--node", node_id)

        if node_info["sticky"]:
            _set_focus_color(STICKY_FOCUS_COLOR)
            return
        if node_info["client"]["state"] == "floating":
            _set_focus_color(FLOATING_FOCUS_COLOR)
            return

        # finally check monocle once again
        if _set_monocle_focus(desk_id):
            return

    # no special settings, use default
    _set_focus_color(DEFAULT_FOCUS_COLOR)


def get_leaves(*, desktop=None, node=""):
    if desktop is None:
        desktop = "focused"

    return bspc.query(
        "--nodes",
        "--desktop",
        desktop,
        "--node",
        f".leaf.window.!hidden.!floating{node}",
    )


def balance_nodes(desk_id=None, *, equalize=False):
    desk_id = "@/" if desk_id is None else f"{desk_id}:"
    cmd = [desk_id, "--balance"]
    if equalize:
        cmd.append("--equalize")

    bspc.node(*cmd)


def node_add_third_window(ev, ev_args):
    [mon_id, desk_id, win_id] = ev_args[:3]

    desktop_nodes = get_leaves()

    if mon_id == ULTRAWIDE_ID or mon_id == VERTICAL_ID:
        if len(desktop_nodes) == 3:
            balance_nodes()


def node_remove_third_window(ev, ev_args):
    [mon_id, desk_id, win_id] = ev_args[:3]

    desktop_nodes = get_leaves()

    if mon_id == ULTRAWIDE_ID or mon_id == VERTICAL_ID:
        if len(desktop_nodes) == 3 or len(desktop_nodes) == 2:
            balance_nodes()


def node_transfer_third_window(ev, ev_args):
    [
        src_mon_id,
        src_desk_id,
        src_node_id,
        dest_mon_id,
        dest_desk_id,
        dest_node_id,
    ] = ev_args

    if src_mon_id == ULTRAWIDE_ID or src_mon_id == VERTICAL_ID:
        src_nodes = get_leaves(desktop=src_desk_id)

        # same as node add
        if len(src_nodes) == 3 or len(src_nodes) == 2:
            balance_nodes(src_desk_id)

    if dest_mon_id == ULTRAWIDE_ID or dest_mon_id == VERTICAL_ID:
        dest_nodes = get_leaves(desktop=dest_desk_id)

        # same as node remove
        if len(dest_nodes) == 3:
            balance_nodes(dest_desk_id)


def node_add_video_window(ev, ev_args):
    [mon_id, desk_id, parent_id, win_id] = ev_args

    parent = bspc.tree("--node", parent_id)
    win = bspc.tree("--node", win_id)

    if rget(win, "client.className", "").lower() in ("mpv", "vlc", "smplayer"):
        parent_geom = rget(parent, "client.tiledRectangle")
        # the floating rectangle of the video window is the aspect ratio we want!
        win_geom = rget(win, "client.floatingRectangle")

        new_ratio = split_ratio(
            parent_geom["width"],
            parent_geom["height"],
            width_ratio=win_geom["width"],
            height_ratio=win_geom["height"],
        )

        # set the new ratio and direction
        bspc.node("@parent", "--ratio", new_ratio["split_ratio"], debug=True)


if __name__ == "__main__":
    # begin event processing loop
    while 1:
        line = sys.stdin.readline()
        [ev, *ev_args] = line.split()

        if ev in ("desktop_layout", "node_focus", "node_state", "node_flag"):
            handle_border_color(ev, ev_args)

        # if ev == "node_add":
        #     if node_add_video_window(ev, ev_args):
        #         continue

        # setup auto balancing for 3 windows if ultrawide or vertical
        if ULTRAWIDE_ID or VERTICAL_ID:
            if ev == "node_add":
                node_add_third_window(ev, ev_args)

            if ev == "node_remove":
                node_remove_third_window(ev, ev_args)

            if ev == "node_transfer":
                node_transfer_third_window(ev, ev_args)

        # q(int(time()), ev, ev_args)
