#!/usr/bin/env python3

import sys
from bspc import ULTRAWIDE_ID, VERTICAL_ID
import bspc

DEFAULT_FOCUS_COLOR = "#4491ed"
MONOCLE_FOCUS_COLOR = "#c792ea"
STICKY_FOCUS_COLOR = "#f78c6c"
FLOATING_FOCUS_COLOR = "#22da6e"


def _set_focus_color(color):
    bspc.config("focused_border_color", color)


def _set_monocle_focus(desk_id):
    desk_info = bspc.tree("--desktop", desk_id)
    layout = desk_info["userLayout"]

    # set color if monocle with other windows
    if layout == "monocle":
        # any other windows?
        nodes = bspc.query("--nodes", "--desktop", desk_id, "--node", ".leaf")
        if len(nodes) > 1:
            _set_focus_color(MONOCLE_FOCUS_COLOR)
            return True

    return False


def handle_border_color(ev, ev_args):
    # as long as color is changed from default, bail early
    mon_id, desk_id = ev_args[:2]

    # bail for node state first
    if ev == "desktop_layout":
        if _set_monocle_focus(desk_id):
            return

    else:
        node_id = ev_args[2]
        node_info = bspc.tree("--node", node_id)

        if node_info["sticky"]:
            _set_focus_color(STICKY_FOCUS_COLOR)
            return
        if node_info["client"]["state"] == "floating":
            _set_focus_color(FLOATING_FOCUS_COLOR)
            return

        # finally check monocle once again
        if _set_monocle_focus(desk_id):
            return

    # no special settings, use default
    _set_focus_color(DEFAULT_FOCUS_COLOR)


def get_leaves(node, *, path=""):
    ret = {}
    if node["firstChild"]:
        ret.update(get_leaves(node["firstChild"], path=f"{path}1"))

    if node["secondChild"]:
        ret.update(get_leaves(node["secondChild"], path=f"{path}2"))

    # found a leaf node!
    if not node["firstChild"] and not node["secondChild"]:
        node_id = node["id"]
        nice_path = "/".join(list(path))
        # key by both path and node id, so actual len is half
        ret[nice_path] = node_id
        ret[node_id] = nice_path

    return ret


def third_win_id(desk_id="focused"):
    root = bspc.tree("--desktop", desk_id).get("root", {})
    if not root:
        return None

    leaves = get_leaves(root)

    # 3 leaf nodes total
    # handle both child of first node / child of second node
    if len(leaves) / 2 == 3:
        return leaves.get("1/1") or leaves.get("2/1")


def balance_nodes(desk_id=""):
    if desk_id:
        desk_id = f"{desk_id}:"
    bspc.node(f"@{desk_id}/", "--equalize", "--balance")


def handle_node_add(ev, ev_args):
    [mon_id, desk_id, win_id] = ev_args[:3]
    if mon_id == ULTRAWIDE_ID or mon_id == VERTICAL_ID:
        if int(win_id, 16) == third_win_id(desk_id):
            balance_nodes()


def handle_node_remove(ev, ev_args):
    [mon_id, desk_id, win_id] = ev_args[:3]
    if mon_id == ULTRAWIDE_ID or mon_id == VERTICAL_ID:
        if not third_win_id(desk_id):
            balance_nodes()


def handle_node_transfer(ev, ev_args):
    [
        src_mon_id,
        src_desk_id,
        src_node_id,
        dest_mon_id,
        dest_desk_id,
        dest_node_id,
    ] = ev_args

    if src_mon_id == ULTRAWIDE_ID or src_mon_id == VERTICAL_ID:
        # same as node_remove, balance remaining 2 nodes
        if not third_win_id(src_desk_id):
            balance_nodes(src_desk_id)

    if dest_mon_id == ULTRAWIDE_ID or dest_mon_id == VERTICAL_ID:
        # same as node_add, balance 3 nodes
        if int(dest_node_id) == third_win_id(dest_desk_id):
            balance_nodes(dest_desk_id)


if __name__ == "__main__":
    # begin event processing loop
    while 1:
        line = sys.stdin.readline()
        [ev, *ev_args] = line.split()

        if ev in ("desktop_layout", "node_focus", "node_state", "node_flag"):
            handle_border_color(ev, ev_args)

        # auto balancing
        if ULTRAWIDE_ID or VERTICAL_ID:
            if ev == "node_add":
                handle_node_add(ev, ev_args)

            if ev == "node_remove":
                handle_node_remove(ev, ev_args)

            if ev == "node_transfer":
                handle_node_transfer(ev, ev_args)

        # print(int(time()), ev, ev_args)
