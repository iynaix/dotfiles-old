#!/usr/bin/env python3 -B

from pathlib import Path
import argparse
import json
import socket
import subprocess
import sys
import time
import urllib.request

MPV_SOCKET = "/tmp/mpvsocket"
FORCE_DAC_URL = "http://192.168.1.103:1880/endpoint/force_dac"

# create arg parser
parser = argparse.ArgumentParser(description="Controls MPV")
parser.add_argument(
    "Operation",
    metavar="OPERATION",
    type=str,
    help="Operation: open / play / pause / playpause / seek",
)
parser.add_argument("Path", metavar="PATH", type=str)


def get_wid():
    try:
        wid = subprocess.check_output(("xdotool", "search", "--class", "mpv")).decode(
            "ascii"
        )
        return int(wid)
    except subprocess.CalledProcessError:
        return None


def socat(cmd, socket_file=MPV_SOCKET):
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

    if not isinstance(cmd, str):
        cmd = json.dumps({"command": cmd})

    if not cmd.endswith("\n"):
        cmd = f"{cmd}\n"

    try:
        sock.connect(socket_file)
        sock.sendall(cmd.encode())
        return json.loads(sock.recv(1024).decode("utf8").strip())
    finally:
        sock.close()


def target_playback_speed(fname):
    parts = Path(fname).parts

    if "pending" in parts:
        return 1
    if "Unsorted" in parts:
        return 1
    if "TEMP" in parts:
        return 1
    if "TMP" in parts:
        return 1
    if "Courses" in parts:
        return 1.5
    if "Videos" in parts:
        return 1

    return 1.5


def set_target_playback_speed(fname):
    # normal speed, speed it up if needed
    if 0.95 <= socat(["get_property", "speed"])["data"] <= 1.05:
        target_speed = target_playback_speed(fname)

        if target_speed != 1:
            socat(["set_property", "speed", target_speed])


def should_use_dac(fname):
    parts = Path(fname).parts

    if "pending" in parts:
        return True
    if "Unsorted" in parts:
        return True
    if "TEMP" in parts:
        return True
    if "TMP" in parts:
        return True

    return False


if __name__ == "__main__":
    # args = parser.parse_args()

    op = sys.argv[1]
    wid = get_wid()

    if op == "open":
        fname = sys.argv[2]

        # switch to using the dac if necessary
        if should_use_dac(fname):
            urllib.request.urlopen(FORCE_DAC_URL)

        if wid:
            socat(["loadfile", fname, "replace"])
            socat(["set_property", "pause", False])

            set_target_playback_speed(fname)
        else:
            subprocess.Popen(("mpv", "--no-terminal", "--no-pause", fname))

            time.sleep(0.5)
            set_target_playback_speed(fname)

        # focus the window
        if wid:
            subprocess.run(("bspc", "node", "--focus", wid))

    elif op == "play":
        socat(["set_property", "pause", False])

    elif op == "pause":
        socat(["set_property", "pause", True])

    elif op == "playpause":
        socat(["cycle", "pause"])

    elif op == "seek":
        if wid:
            jump = sys.argv[2]
            socat(["seek", jump])
