#!/usr/bin/env python3 -B

import sys
import bspc


def node_string(node, *, node_no=None, indent_level=0, coords=False):
    # handle root node
    if "root" in node:
        node = node["root"]
        node_no = "root"

    split_info = f"{node['splitRatio']:.2f}{node['splitType'][0].upper()}"

    flags = ""
    for flag in ("vacant", "hidden", "sticky", "private", "locked", "marked"):
        if node[flag]:
            flags += node[flag[0]]
    if flags:
        flags = f"[{flags}]"

    rect = node["rectangle"]
    dim = f"{rect['width']}*{rect['height']}"
    xy = f"({rect['x']},{rect['y']})" if coords else ""

    indent = "  " * indent_level
    if node_no:
        node_no = f"{node_no}: "

    ret = "  ".join(
        s for s in (indent, node_no, split_info, flags, dim, xy, f"({node['id']})") if s
    )
    # handle children
    if node["firstChild"]:
        ret += "\n" + node_string(
            node["firstChild"], node_no=1, indent_level=indent_level + 1, coords=coords
        )
    if node["secondChild"]:
        ret += "\n" + node_string(
            node["secondChild"], node_no=2, indent_level=indent_level + 1, coords=coords
        )
    return ret


# prints an easier to read version of the tree, takes the same arguments as bspc query -T
if __name__ == "__main__":
    tree = bspc.tree(*sys.argv[1:])
    print(node_string(tree))
