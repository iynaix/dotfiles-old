#!/usr/bin/env python3

import bspc
import sys

DEFAULT_PADDING = 10


def get_corner_info():
    mon = bspc.monitor_geometry()
    win = bspc.window_geometry()

    hori = None
    vert = None
    pad_x = DEFAULT_PADDING
    pad_y = DEFAULT_PADDING

    mon_hcenter = mon["x"] + mon["w"] / 2 - win["w"] / 2
    if mon_hcenter == win["x"]:
        hori = "center"
    else:
        left_offset = win["x"] - mon["x"]
        right_offset = mon["x"] + mon["w"] - (win["x"] + win["w"])
        if left_offset > right_offset:
            hori = "right"
            pad_x = right_offset
        else:
            hori = "left"
            pad_x = left_offset

    mon_vcenter = mon["y"] + bspc.BAR_HEIGHT + mon["h"] / 2 - win["h"] / 2
    if mon_vcenter == win["y"]:
        vert = "center"
    else:
        top_offset = win["y"] - (mon["y"] + bspc.BAR_HEIGHT)
        bottom_offset = mon["y"] + mon["h"] - (win["y"] + win["h"])
        if top_offset > bottom_offset:
            vert = "bottom"
            pad_y = bottom_offset
        else:
            vert = "top"
            pad_y = top_offset

    return {"vert": vert, "hori": hori, "pad_x": pad_x, "pad_y": pad_y}


def move_pip(corner_info, direction):
    new_hori = corner_info["hori"]
    new_vert = corner_info["vert"]

    if direction == "up":
        if corner_info["vert"] == "center":
            new_vert = "top"
        elif corner_info["vert"] == "bottom":
            new_vert = "center"
    elif direction == "down":
        if corner_info["vert"] == "center":
            new_vert = "bottom"
        elif corner_info["vert"] == "top":
            new_vert = "center"
    elif direction == "left":
        if corner_info["hori"] == "center":
            new_hori = "left"
        elif corner_info["hori"] == "right":
            new_hori = "center"
    elif direction == "right":
        if corner_info["hori"] == "center":
            new_hori = "right"
        elif corner_info["hori"] == "left":
            new_hori = "center"
    else:
        return

    return bspc.move_window_to_corner(
        f"{new_vert}-{new_hori}", pad_x=corner_info["pad_x"], pad_y=corner_info["pad_y"]
    )


if __name__ == "__main__":
    if len(sys.argv) < 2:
        exit()

    # set window back to normal tiling status
    direction = sys.argv[1].lower()
    node_info = bspc.tree("--node", "focused")
    if node_info["client"]["state"] == "floating":
        if node_info["sticky"]:
            # move pip window
            corner_info = get_corner_info()
            move_pip(corner_info, direction)

        else:
            # move normal floating window
            deltas = {
                "left": (-20, 0),
                "down": (0, 20),
                "up": (0, -20),
                "right": (20, 0),
            }
            offsets = deltas.get(direction, None)

            # invalid argument
            if offsets is None:
                exit()

            bspc.node("--move", *offsets)
